<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"

    xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       ">
	
	<!-- 加载配置文件,统一变量数据 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:sys.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="proUtil" class="com.xwtec.ecu.web.payment.util.ProUtil">
		<property name="locations">  
			<list>
				<value>classpath*:payment.properties</value>
				<value>classpath*:headSculpture.properties</value>
			</list>
		</property>
		<property name = "systemPropertiesModeName" value = "SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>
	
	<!-- 配置数据源,使用阿里 druid 数据库连接池 -->
	<bean id ="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${dataSource.initialSize}"/>
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${dataSource.maxActive}"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${dataSource.maxWait}" />
		<!-- 最小/最大空闲连接数 -->
		<property name="minIdle" value="${dataSource.minIdle}" />
<!-- 		<property name="maxIdle" value="${dataSource.maxIdle}"/> -->
		<property name="validationQuery" value="${dataSource.validationQuery}"/>
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}"/>
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}"/>
		<property name="testOnReturn" value="${dataSource.testOnReturn}"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />
		<property name="poolPreparedStatements" value="${dataSource.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${dataSource.filters}" />
		
		<!-- 打开 removeAbandoned 功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800 秒-->
		<property name="removeAbandonedTimeout" value ="1800" />
		<!-- 关闭 abanded 连接时输出错误日志 -->   
		<property name="logAbandoned" value="true" />
	</bean>

	 <!--配置spring的jdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 配置mybatis的sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-configuration.xml"></property>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置mybatis的sqlSessionTemplate-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 如果需要扫描多个包，中间使用逗号隔开 -->
		<property name="basePackage" value="com.xwtec.ecu.web.*.dao"></property>
	</bean>
	
	<!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据库源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 用于获取当前spring容器内的bean -->
	<bean id="springContextHolder" class="com.xwtec.ecu.common.spring.SpringContextHolder" />
	
	
	<!-- 事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="delete*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
      <tx:method name="del*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
      <tx:method name="insert*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.RuntimeException" />
      <tx:method name="create*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.RuntimeException" />           
      <tx:method name="save*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.RuntimeException" />
      <tx:method name="add*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.RuntimeException" />
      <tx:method name="update*" propagation="REQUIRED" read-only="false" 
                 rollback-for="java.lang.Exception" />
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="select*" propagation="SUPPORTS"/>
      <tx:method name="query*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>
  
  <aop:config>    
    <aop:pointcut id="aopPointcut" expression="execution(* com.xwtec.ecu.web.*.service.impl.*.*(..))" />
    <aop:advisor pointcut-ref="aopPointcut" advice-ref="txAdvice" />
  </aop:config>
</beans>